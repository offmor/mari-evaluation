import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Configuration
TIMEOUT_VALUE_SECONDS = 1.24415
TOP_N_JOIN = 100  # Analyze the first N unique nodes to join

# Raw Data
# Note: The join_blob may contain mixed event types; the script will filter them.
join_blob = """
2025-08-21T15:06:43.471991 0x70F6661004F7ACD8 NODE_JOINED
2025-08-21T15:06:43.571494 0xDFD017EB417D107C NODE_JOINED
2025-08-21T15:06:44.500861 0xF32E9A8AD1330DAA NODE_JOINED
2025-08-21T15:06:45.203833 0xEB1CBDD50E237596 NODE_JOINED
2025-08-21T15:06:45.246903 0x109E28ECE64C36EF NODE_JOINED
2025-08-21T15:06:45.440756 0xB962B4F6A50A6F76 NODE_JOINED
2025-08-21T15:06:45.517814 0x1C8CBEB244CCFA85 NODE_JOINED
2025-08-21T15:06:45.538730 0xDF773BB80AF0C2F9 NODE_JOINED
2025-08-21T15:06:45.841859 0x1A836AA1A5524991 NODE_JOINED
2025-08-21T15:06:46.220766 0x93B9409637347BA4 NODE_JOINED
2025-08-21T15:06:46.263970 0x44E5B4534F8DBC91 NODE_JOINED
2025-08-21T15:06:46.295699 0xC82CA0F38D2A15E9 NODE_JOINED
2025-08-21T15:06:46.328780 0xDC878301DB6B0590 NODE_JOINED
2025-08-21T15:06:46.338815 0x150E3BE9B7C78815 NODE_JOINED
2025-08-21T15:06:46.599833 0x15D5017AA3800F1E NODE_JOINED
2025-08-21T15:06:46.837056 0x7AA3DC93896A316C NODE_JOINED
2025-08-21T15:06:46.954785 0x6B46BAF4D7A85A28 NODE_JOINED
2025-08-21T15:06:47.031928 0x18AEAF2D1A44956C NODE_JOINED
2025-08-21T15:06:47.324995 0xAD89E8BD0C51208E NODE_JOINED
2025-08-21T15:06:47.442705 0x038C701874C52B20 NODE_JOINED
2025-08-21T15:06:47.452705 0xC48AACFD77448F11 NODE_JOINED
2025-08-21T15:06:47.616801 0x97DA7DD328BDBDCB NODE_JOINED
2025-08-21T15:06:48.005966 0xBB3EB8601B7E9133 NODE_JOINED
2025-08-21T15:06:48.015772 0xB166C8B51AA6AFB4 NODE_JOINED
2025-08-21T15:06:48.189758 0x0C9A20E2E5E6F54C NODE_JOINED
2025-08-21T15:06:48.199701 0x7AB893A1407FC78B NODE_JOINED
2025-08-21T15:06:48.232817 0x6D464E29F925B623 NODE_JOINED
2025-08-21T15:06:48.254817 0x8C3BDCC588440DCA NODE_JOINED
2025-08-21T15:06:48.307949 0x7DE4C0586D06974B NODE_JOINED
2025-08-21T15:06:48.358405 0xF1B028C6B39693A5 NODE_JOINED
2025-08-21T15:06:48.372763 0xC4FAE708729C9496 NODE_JOINED
2025-08-21T15:06:48.394676 0x3EFC6553DEE09DD1 NODE_JOINED
2025-08-21T15:06:48.416699 0x0A833E78880C6DC5 NODE_JOINED
2025-08-21T15:06:48.426672 0xE37BBA04F9D3FE89 NODE_JOINED
2025-08-21T15:06:48.469717 0x21F5E133961F7156 NODE_JOINED
2025-08-21T15:06:48.481764 0x730E9A42C083C69A NODE_JOINED
2025-08-21T15:06:48.491742 0x3D8C803B29CDFEE5 NODE_JOINED
2025-08-21T15:06:48.513807 0x8287A487A221DC74 NODE_JOINED
2025-08-21T15:06:48.546857 0xDCE0471FD437E359 NODE_JOINED
2025-08-21T15:06:48.568822 0x83C6ECAC460B23F3 NODE_JOINED
2025-08-21T15:06:48.612823 0x040877A02041BD1D NODE_JOINED
2025-08-21T15:06:48.675723 0xB7B971F84F29BAE7 NODE_JOINED
2025-08-21T15:06:48.708731 0x3879F53E18494531 NODE_JOINED
2025-08-21T15:06:48.718379 0x8CF14B56416ED46A NODE_JOINED
2025-08-21T15:06:48.740692 0x92D09B92D4C096B7 NODE_JOINED
2025-08-21T15:06:48.773849 0x2AD3880D2C9D1E8F NODE_JOINED
2025-08-21T15:06:48.795864 0xC063EDB67C4CCA58 NODE_JOINED
2025-08-21T15:06:48.817801 0xED02BE5529D07C34 NODE_JOINED
2025-08-21T15:06:48.945723 0x9AB59A717BC7F74D NODE_JOINED
2025-08-21T15:06:48.967712 0x4FB05AEE6FCA046D NODE_JOINED
2025-08-21T15:06:49.032735 0x40FC2256FB47388C NODE_JOINED
2025-08-21T15:06:49.054771 0x62EA2424EC725377 NODE_JOINED
2025-08-21T15:06:49.216724 0xB4E8C68D708FDA97 NODE_JOINED
2025-08-21T15:06:49.281825 0x564C682ACC9A2E04 NODE_JOINED
2025-08-21T15:06:49.324951 0x0314C3596BF55EB0 NODE_JOINED
2025-08-21T15:06:49.421684 0xA95D8A2DF55E6C44 NODE_JOINED
2025-08-21T15:06:49.455719 0x57459F680F660A9F NODE_JOINED
2025-08-21T15:06:49.486742 0x663CFC5276CFCEAB NODE_JOINED
2025-08-21T15:06:49.508709 0x7AEFDCA81BF7AA3F NODE_JOINED
2025-08-21T15:06:49.520713 0x613FD651ED0CEF84 NODE_JOINED
2025-08-21T15:06:49.541725 0x3EF06E4B72E98CCD NODE_JOINED
2025-08-21T15:06:49.573868 0xBCB2E712F6D078E2 NODE_JOINED
2025-08-21T15:06:49.607984 0x151148302FD6F5A2 NODE_JOINED
2025-08-21T15:06:49.672693 0x4A59DBDDD9A34F45 NODE_JOINED
2025-08-21T15:06:49.673022 0xDBD14A8C2AB0CE32 NODE_JOINED
2025-08-21T15:06:49.682733 0xF0191FAE600A683B NODE_JOINED
2025-08-21T15:06:49.692755 0xFB986FD3DFD36E63 NODE_JOINED
2025-08-21T15:06:49.790731 0xD7594C7965872E3B NODE_JOINED
2025-08-21T15:06:49.812863 0x377F90EF6D2719F0 NODE_JOINED
2025-08-21T15:06:49.844953 0xBEBAD533DADE0490 NODE_JOINED
2025-08-21T15:06:49.855845 0xE26E0464A4FE9291 NODE_JOINED
2025-08-21T15:06:49.877892 0xC8B80BC5F6082B14 NODE_JOINED
2025-08-21T15:06:49.949916 0x258B330DDDAFDE9C NODE_JOINED
2025-08-21T15:06:49.950665 0x7694C881B384EE03 NODE_JOINED
2025-08-21T15:06:49.962742 0xBBD5A9C611DA3321 NODE_JOINED
2025-08-21T15:06:49.996714 0xB459710B9A8D5037 NODE_JOINED
2025-08-21T15:06:50.027737 0xE465587BB61A99A9 NODE_JOINED
2025-08-21T15:06:50.061729 0xC3DC334F29158BC2 NODE_JOINED
2025-08-21T15:06:50.082893 0x44B408F1766E0BF5 NODE_JOINED
2025-08-21T15:06:50.104861 0x7E98AD7EB9DDF59E NODE_JOINED
2025-08-21T15:06:50.114807 0x10A8355E7687831A NODE_JOINED
2025-08-21T15:06:50.126910 0x35CE7BC91E0F3535 NODE_JOINED
2025-08-21T15:06:50.226160 0x40FC2256FB47388C NODE_JOINED
2025-08-21T15:06:50.226518 0x11A0A918B5B8E7FA NODE_JOINED
2025-08-21T15:06:50.226956 0x34CC9F023F7278AC NODE_JOINED
2025-08-21T15:06:50.244757 0x554EC897971DCF18 NODE_JOINED
2025-08-21T15:06:50.331738 0x8773544FDD51DD6E NODE_JOINED
2025-08-21T15:06:50.428732 0x0AB87C44C20B0149 NODE_JOINED
2025-08-21T15:06:50.498888 0xC5050714D7852A85 NODE_JOINED
2025-08-21T15:06:50.499531 0x170A5A45AE7877A0 NODE_JOINED
2025-08-21T15:06:50.503735 0x55DA7FF0F238A844 NODE_JOINED
2025-08-21T15:06:50.515750 0x9579960F203ADE95 NODE_JOINED
2025-08-21T15:06:50.568743 0x42ADEC8748A3212B NODE_JOINED
2025-08-21T15:06:50.665759 0x17D0F99D09B254CD NODE_JOINED
2025-08-21T15:06:50.948788 0xA8AA71AD0EECCFEA NODE_JOINED
2025-08-21T15:06:50.958814 0x4A4698749A3DF602 NODE_JOINED
2025-08-21T15:06:51.056734 0x13D398E530317D6F NODE_JOINED
2025-08-21T15:06:51.066733 0xCD9FC2F10292D689 NODE_JOINED
2025-08-21T15:06:51.163755 0x13D398E530317D6F NODE_JOINED
2025-08-21T15:06:51.315125 0x588D2578218A459B NODE_JOINED
2025-08-21T15:06:51.445749 0x6CE02E64CFA45053 NODE_JOINED
2025-08-21T15:06:51.737796 0xFDB6CC02C854CF1E NODE_JOINED
2025-08-21T15:06:52.419463 0x13D398E530317D6F NODE_LEFT
2025-08-21T15:06:52.530745 0x588D2578218A459B NODE_LEFT
2025-08-21T15:06:52.692746 0x6CE02E64CFA45053 NODE_LEFT
2025-08-21T15:06:52.967912 0x13D398E530317D6F NODE_JOINED
2025-08-21T15:06:53.154810 0x6CE02E64CFA45053 NODE_JOINED
"""

left_blob = """
2025-08-21T15:06:44.512796 0xDFD017EB417D107C NODE_LEFT
2025-08-21T15:06:44.765217 0x70F6661004F7ACD8 NODE_LEFT
2025-08-21T15:06:45.691239 0xF32E9A8AD1330DAA NODE_LEFT
2025-08-21T15:06:46.275689 0x109E28ECE64C36EF NODE_LEFT
2025-08-21T15:06:46.444956 0xEB1CBDD50E237596 NODE_LEFT
2025-08-21T15:06:46.479573 0xB962B4F6A50A6F76 NODE_LEFT
2025-08-21T15:06:46.567828 0x1C8CBEB244CCFA85 NODE_LEFT
2025-08-21T15:06:46.709385 0xDF773BB80AF0C2F9 NODE_LEFT
2025-08-21T15:06:46.772281 0x1A836AA1A5524991 NODE_LEFT
2025-08-21T15:06:46.990828 0x93B9409637347BA4 NODE_LEFT
2025-08-21T15:06:47.159228 0xDC878301DB6B0590 NODE_LEFT
2025-08-21T15:06:47.215030 0x150E3BE9B7C78815 NODE_LEFT
2025-08-21T15:06:47.261769 0x44E5B4534F8DBC91 NODE_LEFT
2025-08-21T15:06:47.295207 0xC82CA0F38D2A15E9 NODE_LEFT
2025-08-21T15:06:47.398995 0x15D5017AA3800F1E NODE_LEFT
2025-08-21T15:06:47.757157 0x7AA3DC93896A316C NODE_LEFT
2025-08-21T15:06:48.090008 0x6B46BAF4D7A85A28 NODE_LEFT
2025-08-21T15:06:48.184471 0x18AEAF2D1A44956C NODE_LEFT
2025-08-21T15:06:48.319932 0xAD89E8BD0C51208E NODE_LEFT
2025-08-21T15:06:48.506826 0x97DA7DD328BDBDCB NODE_LEFT
2025-08-21T15:06:48.536853 0xC48AACFD77448F11 NODE_LEFT
2025-08-21T15:06:48.546762 0x038C701874C52B20 NODE_LEFT
2025-08-21T15:06:49.124070 0xBB3EB8601B7E9133 NODE_LEFT
2025-08-21T15:06:49.216782 0xF1B028C6B39693A5 NODE_LEFT
2025-08-21T15:06:49.217354 0x21F5E133961F7156 NODE_LEFT
2025-08-21T15:06:49.218048 0xB166C8B51AA6AFB4 NODE_LEFT
2025-08-21T15:06:49.219115 0x3EFC6553DEE09DD1 NODE_LEFT
2025-08-21T15:06:49.225035 0x7DE4C0586D06974B NODE_LEFT
2025-08-21T15:06:49.248980 0x0A833E78880C6DC5 NODE_LEFT
2025-08-21T15:06:49.259197 0x8C3BDCC588440DCA NODE_LEFT
2025-08-21T15:06:49.282166 0x6D464E29F925B623 NODE_LEFT
2025-08-21T15:06:49.319174 0xE37BBA04F9D3FE89 NODE_LEFT
2025-08-21T15:06:49.381931 0x730E9A42C083C69A NODE_LEFT
2025-08-21T15:06:49.382214 0x3D8C803B29CDFEE5 NODE_LEFT
2025-08-21T15:06:49.382434 0x7AB893A1407FC78B NODE_LEFT
2025-08-21T15:06:49.393781 0x0C9A20E2E5E6F54C NODE_LEFT
2025-08-21T15:06:49.401845 0xC4FAE708729C9496 NODE_LEFT
2025-08-21T15:06:49.474102 0xDCE0471FD437E359 NODE_LEFT
2025-08-21T15:06:49.537176 0x2AD3880D2C9D1E8F NODE_LEFT
2025-08-21T15:06:49.540770 0x040877A02041BD1D NODE_LEFT
2025-08-21T15:06:49.576163 0xC063EDB67C4CCA58 NODE_LEFT
2025-08-21T15:06:49.629268 0x92D09B92D4C096B7 NODE_LEFT
2025-08-21T15:06:49.629720 0x8287A487A221DC74 NODE_LEFT
2025-08-21T15:06:49.657858 0x83C6ECAC460B23F3 NODE_LEFT
2025-08-21T15:06:49.670855 0xED02BE5529D07C34 NODE_LEFT
2025-08-21T15:06:49.792802 0x8CF14B56416ED46A NODE_LEFT
2025-08-21T15:06:49.793382 0x3879F53E18494531 NODE_LEFT
2025-08-21T15:06:49.793681 0xB7B971F84F29BAE7 NODE_LEFT
2025-08-21T15:06:50.048955 0xBEBAD533DADE0490 NODE_LEFT
2025-08-21T15:06:50.109293 0x40FC2256FB47388C NODE_LEFT
2025-08-21T15:06:50.109618 0x62EA2424EC725377 NODE_LEFT
2025-08-21T15:06:50.141861 0x4FB05AEE6FCA046D NODE_LEFT
2025-08-21T15:06:50.205991 0x9AB59A717BC7F74D NODE_LEFT
2025-08-21T15:06:50.206347 0xBCB2E712F6D078E2 NODE_LEFT
2025-08-21T15:06:50.206543 0x151148302FD6F5A2 NODE_LEFT
2025-08-21T15:06:50.206697 0x35CE7BC91E0F3535 NODE_LEFT
2025-08-21T15:06:50.206974 0x613FD651ED0CEF84 NODE_LEFT
2025-08-21T15:06:50.207163 0x11A0A918B5B8E7FA NODE_LEFT
2025-08-21T15:06:50.207320 0x258B330DDDAFDE9C NODE_LEFT
2025-08-21T15:06:50.207465 0x564C682ACC9A2E04 NODE_LEFT
2025-08-21T15:06:50.221694 0xB4E8C68D708FDA97 NODE_LEFT
2025-08-21T15:06:50.223618 0xA95D8A2DF55E6C44 NODE_LEFT
2025-08-21T15:06:50.236768 0x7AEFDCA81BF7AA3F NODE_LEFT
2025-08-21T15:06:50.275981 0x10A8355E7687831A NODE_LEFT
2025-08-21T15:06:50.286050 0xFB986FD3DFD36E63 NODE_LEFT
2025-08-21T15:06:50.321041 0x0314C3596BF55EB0 NODE_LEFT
2025-08-21T15:06:50.379307 0xE465587BB61A99A9 NODE_LEFT
2025-08-21T15:06:50.443280 0x3EF06E4B72E98CCD NODE_LEFT
2025-08-21T15:06:50.443675 0x8773544FDD51DD6E NODE_LEFT
2025-08-21T15:06:50.493766 0xDBD14A8C2AB0CE32 NODE_LEFT
2025-08-21T15:06:50.507746 0x4A59DBDDD9A34F45 NODE_LEFT
2025-08-21T15:06:50.561093 0xD7594C7965872E3B NODE_LEFT
2025-08-21T15:06:50.580058 0x663CFC5276CFCEAB NODE_LEFT
2025-08-21T15:06:50.621593 0x57459F680F660A9F NODE_LEFT
2025-08-21T15:06:50.656920 0x42ADEC8748A3212B NODE_LEFT
2025-08-21T15:06:50.657877 0xE26E0464A4FE9291 NODE_LEFT
2025-08-21T15:06:50.670093 0x377F90EF6D2719F0 NODE_LEFT
2025-08-21T15:06:50.803493 0xC5050714D7852A85 NODE_LEFT
2025-08-21T15:06:50.858418 0xF0191FAE600A683B NODE_LEFT
2025-08-21T15:06:50.859667 0xC8B80BC5F6082B14 NODE_LEFT
2025-08-21T15:06:50.871799 0x7694C881B384EE03 NODE_LEFT
2025-08-21T15:06:50.961085 0xBBD5A9C611DA3321 NODE_LEFT
2025-08-21T15:06:50.981005 0xC3DC334F29158BC2 NODE_LEFT
2025-08-21T15:06:50.996035 0x44B408F1766E0BF5 NODE_LEFT
2025-08-21T15:06:51.037814 0x7E98AD7EB9DDF59E NODE_LEFT
2025-08-21T15:06:51.131928 0xB459710B9A8D5037 NODE_LEFT
2025-08-21T15:06:51.173019 0x34CC9F023F7278AC NODE_LEFT
2025-08-21T15:06:51.299369 0x554EC897971DCF18 NODE_LEFT
2025-08-21T15:06:51.324867 0x9579960F203ADE95 NODE_LEFT
2025-08-21T15:06:51.432999 0x170A5A45AE7877A0 NODE_LEFT
2025-08-21T15:06:51.510054 0x0AB87C44C20B0149 NODE_LEFT
2025-08-21T15:06:51.632045 0x55DA7FF0F238A844 NODE_LEFT
2025-08-21T15:06:51.757157 0x17D0F99D09B254CD NODE_LEFT
2025-08-21T15:06:51.799616 0xCD9FC2F10292D689 NODE_LEFT
2025-08-21T15:06:51.958017 0x13D398E530317D6F NODE_LEFT
2025-08-21T15:06:52.158287 0xA8AA71AD0EECCFEA NODE_LEFT
2025-08-21T15:06:52.185030 0x588D2578218A459B NODE_LEFT
2025-08-21T15:06:52.510240 0x6CE02E64CFA45053 NODE_LEFT
2025-08-21T15:06:53.145088 0x4A4698749A3DF602 NODE_LEFT
2025-08-21T15:06:53.902978 0xFDB6CC02C854CF1E NODE_LEFT
"""

# ========================
# Data Processing
# ========================
def parse_blob(blob: str) -> pd.DataFrame:
    rows = []
    for line in blob.strip().splitlines():
        parts = line.strip().split()
        if len(parts) < 3:
            continue
        ts, addr, evt = parts[0], parts[1], parts[2]
        rows.append({"timestamp": ts, "node_address": addr, "event": evt})
    df = pd.DataFrame(rows)
    if not df.empty:
        df["timestamp"] = pd.to_datetime(df["timestamp"])
    return df

# Parse raw blobs
df_join_raw = parse_blob(join_blob)
df_left_raw = parse_blob(left_blob)

# Clean JOIN data: filter for JOIN events, sort by time, keep first per address, take top N
df_join_first = (
    df_join_raw[df_join_raw["event"] == "NODE_JOINED"]
    .sort_values("timestamp")
    .drop_duplicates(subset="node_address", keep="first")
    .reset_index(drop=True)
)
df_join_sel = df_join_first.head(TOP_N_JOIN).copy()

# Clean LEFT data: filter for LEFT events, sort by time, keep first per address
df_left = (
    df_left_raw[df_left_raw["event"] == "NODE_LEFT"]
    .sort_values("timestamp")
    .drop_duplicates(subset="node_address", keep="first")
    .reset_index(drop=True)
)

# ========================
# Matching and Calculation
# ========================
# Find common addresses between the cleaned datasets
join_sel_set = set(df_join_sel["node_address"])
left_set = set(df_left["node_address"])
common_addrs = sorted(list(join_sel_set & left_set))

# Calculate adjusted time for LEFT events
TIMEOUT_DELTA = pd.to_timedelta(TIMEOUT_VALUE_SECONDS, unit='s')
df_left["adjusted_left_time"] = df_left["timestamp"] - TIMEOUT_DELTA

# Filter both frames to only include common addresses for a clean merge
df_join_m = df_join_sel[df_join_sel["node_address"].isin(common_addrs)]
df_left_m = df_left[df_left["node_address"].isin(common_addrs)]

merged = pd.merge(
    df_left_m[["node_address", "timestamp", "adjusted_left_time"]],
    df_join_m[["node_address", "timestamp"]],
    on="node_address",
    suffixes=("_left", "_joined"),
)
if merged.empty:
    raise RuntimeError("No matching addresses found after filtering.")

# Calculate the final time difference
merged["final_difference"] = merged["timestamp_joined"] - merged["adjusted_left_time"]

# Prepare final result table
result = merged[["node_address", "timestamp_left", "adjusted_left_time", "timestamp_joined", "final_difference"]].copy()
result = result.rename(columns={
    "timestamp_left": "Original_Left_Time",
    "adjusted_left_time": f"Adjusted_Left_Time (-{TIMEOUT_VALUE_SECONDS:.5f}s)",
    "timestamp_joined": "Rejoined_Time",
    "final_difference": "Final_Time_Difference",
})

# Calculate seconds and clip negative values to zero for plotting/stats
result["diff_seconds_raw"] = result["Final_Time_Difference"].dt.total_seconds()
result["diff_seconds"] = result["diff_seconds_raw"].clip(lower=0.0)

# Save any rows with negative differences to a CSV for inspection
neg_rows = result[result["diff_seconds_raw"] < 0].copy()
if not neg_rows.empty:
    neg_rows.to_csv("gateway_handover_100nodes_negative_rows.csv", index=False)
    print(f"Found {len(neg_rows)} negative values; saved to 'gateway_handover_100nodes_negative_rows.csv'.")

# Create ranks for plotting
result = result.sort_values("diff_seconds", kind="mergesort").reset_index(drop=True)
result["rank"] = np.arange(1, len(result) + 1)
result["rank_label"] = result["rank"].apply(lambda i: f"N{i:03d}")
result[["rank_label", "node_address", "diff_seconds", "Original_Left_Time", "Rejoined_Time"]].to_csv(
    "gateway_handover_100nodes_rank_mapping.csv", index=False
)
print(f"Rank mapping saved to 'gateway_handover_100nodes_rank_mapping.csv' ({len(result)} entries)")

# ========================
# Statistics
# ========================
avg = result["diff_seconds"].mean()
n = len(result)
print(f"Sample Size N={n} | Average Rejoin Delay: {avg:.3f}s")

# ========================
# Visualization (Lollipop Plot)
# ========================
plt.style.use('seaborn-v0_8-ticks')
plt.rcParams.update({'font.size': 16})

x = result["rank"].values
y = result["diff_seconds"].values

plt.figure(figsize=(16, 8))
plt.vlines(x, 0, y, linewidth=1.5)
plt.scatter(x, y, s=24)

plt.axhline(avg, linestyle="--", linewidth=2.5, label=f"Average = {avg:.3f}s")

# Configure x-axis ticks to avoid overcrowding
step = 10
ticks = sorted(set([1] + list(range(step, n, step)) + [n]))
plt.xticks(ticks, [f"N{i:03d}" for i in ticks], fontsize=14)

plt.title(f"Gateway Handover Time — {n} Nodes", fontsize=24, fontweight='bold')
plt.xlabel(f"Node Rank (N001…N{n:03d})", fontsize=18)
plt.ylabel("Rejoin Delay (seconds)", fontsize=18)
plt.grid(axis="y", linestyle="--", alpha=0.6)
plt.legend(loc="upper left", prop={'size': 16})
plt.tight_layout()

plt.savefig("gateway_handover_100nodes_lollipop.pdf", bbox_inches='tight')
plt.show()
