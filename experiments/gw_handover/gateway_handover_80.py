import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Configuration
TIMEOUT_VALUE_SECONDS = 1.24415

# Raw Data
# NOTE: The join_blob may contain mixed event types; the script will filter them.
left_blob = """
2025-08-21T14:59:37.288083 0x55DA7FF0F238A844 NODE_LEFT
2025-08-21T14:59:37.968509 0xE26E0464A4FE9291 NODE_LEFT
2025-08-21T14:59:38.486381 0x0AB87C44C20B0149 NODE_LEFT
2025-08-21T14:59:38.668817 0x3879F53E18494531 NODE_LEFT
2025-08-21T14:59:39.043853 0xC48AACFD77448F11 NODE_LEFT
2025-08-21T14:59:39.279588 0x7AA3DC93896A316C NODE_LEFT
2025-08-21T14:59:39.468712 0x730E9A42C083C69A NODE_LEFT
2025-08-21T14:59:39.536493 0x4A59DBDDD9A34F45 NODE_LEFT
2025-08-21T14:59:39.834196 0xDF773BB80AF0C2F9 NODE_LEFT
2025-08-21T14:59:40.693654 0xBEBAD533DADE0490 NODE_LEFT
2025-08-21T14:59:40.718662 0x7E98AD7EB9DDF59E NODE_LEFT
2025-08-21T14:59:40.959672 0xDC878301DB6B0590 NODE_LEFT
2025-08-21T14:59:41.019688 0x0C9A20E2E5E6F54C NODE_LEFT
2025-08-21T14:59:41.044766 0xBCB2E712F6D078E2 NODE_LEFT
2025-08-21T14:59:41.254484 0x3EFC6553DEE09DD1 NODE_LEFT
2025-08-21T14:59:41.257268 0xB459710B9A8D5037 NODE_LEFT
2025-08-21T14:59:41.279746 0x613FD651ED0CEF84 NODE_LEFT
2025-08-21T14:59:41.281594 0xB7B971F84F29BAE7 NODE_LEFT
2025-08-21T14:59:41.522865 0xAD89E8BD0C51208E NODE_LEFT
2025-08-21T14:59:41.696605 0xED02BE5529D07C34 NODE_LEFT
2025-08-21T14:59:41.955909 0xFB986FD3DFD36E63 NODE_LEFT
2025-08-21T14:59:42.196499 0x151148302FD6F5A2 NODE_LEFT
2025-08-21T14:59:42.222006 0x377F90EF6D2719F0 NODE_LEFT
2025-08-21T14:59:42.312676 0x4FB05AEE6FCA046D NODE_LEFT
2025-08-21T14:59:42.412726 0x42ADEC8748A3212B NODE_LEFT
2025-08-21T14:59:42.427786 0x3EF06E4B72E98CCD NODE_LEFT
2025-08-21T14:59:42.450674 0x8C3BDCC588440DCA NODE_LEFT
2025-08-21T14:59:42.490823 0x150E3BE9B7C78815 NODE_LEFT
2025-08-21T14:59:42.674426 0xEB1CBDD50E237596 NODE_LEFT
2025-08-21T14:59:42.745690 0x57459F680F660A9F NODE_LEFT
2025-08-21T14:59:42.998832 0xBBD5A9C611DA3321 NODE_LEFT
2025-08-21T14:59:43.020633 0xC8B80BC5F6082B14 NODE_LEFT
2025-08-21T14:59:43.211879 0x70F6661004F7ACD8 NODE_LEFT
2025-08-21T14:59:43.212559 0xA95D8A2DF55E6C44 NODE_LEFT
2025-08-21T14:59:43.212853 0xD7594C7965872E3B NODE_LEFT
2025-08-21T14:59:43.213094 0xC4FAE708729C9496 NODE_LEFT
2025-08-21T14:59:43.263638 0xC5050714D7852A85 NODE_LEFT
2025-08-21T14:59:43.396857 0xC063EDB67C4CCA58 NODE_LEFT
2025-08-21T14:59:43.457906 0x6CE02E64CFA45053 NODE_LEFT
2025-08-21T14:59:43.458193 0x35CE7BC91E0F3535 NODE_LEFT
2025-08-21T14:59:43.549890 0x258B330DDDAFDE9C NODE_LEFT
2025-08-21T14:59:43.632510 0xF0191FAE600A683B NODE_LEFT
2025-08-21T14:59:43.633015 0x564C682ACC9A2E04 NODE_LEFT
2025-08-21T14:59:43.633414 0x92D09B92D4C096B7 NODE_LEFT
2025-08-21T14:59:43.633966 0x3D8C803B29CDFEE5 NODE_LEFT
2025-08-21T14:59:43.647538 0x44E5B4534F8DBC91 NODE_LEFT
2025-08-21T14:59:43.659789 0x62EA2424EC725377 NODE_LEFT
2025-08-21T14:59:43.699543 0x0314C3596BF55EB0 NODE_LEFT
2025-08-21T14:59:43.885973 0x13D398E530317D6F NODE_LEFT
2025-08-21T14:59:43.900760 0x9579960F203ADE95 NODE_LEFT
2025-08-21T14:59:43.911864 0xFDB6CC02C854CF1E NODE_LEFT
2025-08-21T14:59:43.916746 0x44B408F1766E0BF5 NODE_LEFT
2025-08-21T14:59:43.923663 0xCD9FC2F10292D689 NODE_LEFT
2025-08-21T14:59:43.933793 0xF32E9A8AD1330DAA NODE_LEFT
2025-08-21T14:59:44.028402 0xDCE0471FD437E359 NODE_LEFT
2025-08-21T14:59:44.209821 0x34CC9F023F7278AC NODE_LEFT
2025-08-21T14:59:44.230623 0xA8AA71AD0EECCFEA NODE_LEFT
2025-08-21T14:59:44.300291 0x18AEAF2D1A44956C NODE_LEFT
2025-08-21T14:59:44.392870 0x040877A02041BD1D NODE_LEFT
2025-08-21T14:59:44.484559 0xDBD14A8C2AB0CE32 NODE_LEFT
2025-08-21T14:59:44.523896 0x038C701874C52B20 NODE_LEFT
2025-08-21T14:59:44.534749 0x7AB893A1407FC78B NODE_LEFT
2025-08-21T14:59:44.688962 0x554EC897971DCF18 NODE_LEFT
2025-08-21T14:59:44.731809 0xC82CA0F38D2A15E9 NODE_LEFT
2025-08-21T14:59:44.786892 0x7DE4C0586D06974B NODE_LEFT
2025-08-21T14:59:44.906568 0x8287A487A221DC74 NODE_LEFT
2025-08-21T14:59:45.206827 0xB166C8B51AA6AFB4 NODE_LEFT
2025-08-21T14:59:45.216939 0x170A5A45AE7877A0 NODE_LEFT
2025-08-21T14:59:45.217850 0xBB3EB8601B7E9133 NODE_LEFT
2025-08-21T14:59:45.219623 0x17D0F99D09B254CD NODE_LEFT
2025-08-21T14:59:45.272853 0x0A833E78880C6DC5 NODE_LEFT
2025-08-21T14:59:45.276900 0x83C6ECAC460B23F3 NODE_LEFT
2025-08-21T14:59:45.489818 0x9AB59A717BC7F74D NODE_LEFT
2025-08-21T14:59:45.500134 0x663CFC5276CFCEAB NODE_LEFT
2025-08-21T14:59:45.501852 0x4A4698749A3DF602 NODE_LEFT
2025-08-21T14:59:45.520978 0xE465587BB61A99A9 NODE_LEFT
2025-08-21T14:59:45.730813 0x15D5017AA3800F1E NODE_LEFT
2025-08-21T14:59:45.737845 0x588D2578218A459B NODE_LEFT
2025-08-21T14:59:45.780915 0xF1B028C6B39693A5 NODE_LEFT
2025-08-21T14:59:46.486920 0x93B9409637347BA4 NODE_LEFT
"""

join_blob = """
2025-08-21T14:59:36.430711 0x55DA7FF0F238A844 NODE_JOINED
2025-08-21T14:59:36.949729 0xE26E0464A4FE9291 NODE_JOINED
2025-08-21T14:59:37.306627 0x0AB87C44C20B0149 NODE_JOINED
2025-08-21T14:59:37.587504 0x3879F53E18494531 NODE_JOINED
2025-08-21T14:59:37.857632 0xC48AACFD77448F11 NODE_JOINED
2025-08-21T14:59:38.063566 0x7AA3DC93896A316C NODE_JOINED
2025-08-21T14:59:38.290584 0x4A59DBDDD9A34F45 NODE_JOINED
2025-08-21T14:59:38.395211 0x730E9A42C083C69A NODE_JOINED
2025-08-21T14:59:38.529472 0x730E9A42C083C69A NODE_JOINED
2025-08-21T14:59:38.637556 0xDF773BB80AF0C2F9 NODE_JOINED
2025-08-21T14:59:39.621688 0xBEBAD533DADE0490 NODE_JOINED
2025-08-21T14:59:39.676589 0x7E98AD7EB9DDF59E NODE_JOINED
2025-08-21T14:59:39.805455 0xDC878301DB6B0590 NODE_JOINED
2025-08-21T14:59:39.816461 0xBCB2E712F6D078E2 NODE_JOINED
2025-08-21T14:59:39.838547 0x0C9A20E2E5E6F54C NODE_JOINED
2025-08-21T14:59:40.000695 0x0C9A20E2E5E6F54C NODE_JOINED
2025-08-21T14:59:40.087542 0xB459710B9A8D5037 NODE_JOINED
2025-08-21T14:59:40.130777 0x3EFC6553DEE09DD1 NODE_JOINED
2025-08-21T14:59:40.140517 0xB7B971F84F29BAE7 NODE_JOINED
2025-08-21T14:59:40.162774 0x613FD651ED0CEF84 NODE_JOINED
2025-08-21T14:59:40.324504 0xAD89E8BD0C51208E NODE_JOINED
2025-08-21T14:59:40.573425 0xED02BE5529D07C34 NODE_JOINED
2025-08-21T14:59:41.147749 0x377F90EF6D2719F0 NODE_JOINED
2025-08-21T14:59:41.276428 0x8C3BDCC588440DCA NODE_JOINED
2025-08-21T14:59:41.288427 0x3EF06E4B72E98CCD NODE_JOINED
2025-08-21T14:59:41.341529 0x150E3BE9B7C78815 NODE_JOINED
2025-08-21T14:59:41.375576 0x42ADEC8748A3212B NODE_JOINED
2025-08-21T14:59:41.406558 0x151148302FD6F5A2 NODE_JOINED
2025-08-21T14:59:41.418481 0x4FB05AEE6FCA046D NODE_JOINED
2025-08-21T14:59:41.558402 0xFB986FD3DFD36E63 NODE_JOINED
2025-08-21T14:59:41.568421 0x57459F680F660A9F NODE_JOINED
2025-08-21T14:59:41.602517 0xEB1CBDD50E237596 NODE_JOINED
2025-08-21T14:59:41.795414 0xC8B80BC5F6082B14 NODE_JOINED
2025-08-21T14:59:42.078439 0xC5050714D7852A85 NODE_JOINED
2025-08-21T14:59:42.088420 0xC4FAE708729C9496 NODE_JOINED
2025-08-21T14:59:42.243392 0xA95D8A2DF55E6C44 NODE_JOINED
2025-08-21T14:59:42.305414 0x258B330DDDAFDE9C NODE_JOINED
2025-08-21T14:59:42.315457 0x35CE7BC91E0F3535 NODE_JOINED
2025-08-21T14:59:42.336449 0x6CE02E64CFA45053 NODE_JOINED
2025-08-21T14:59:42.392666 0x70F6661004F7ACD8 NODE_JOINED
2025-08-21T14:59:42.402537 0xC063EDB67C4CCA58 NODE_JOINED
2025-08-21T14:59:42.413483 0xD7594C7965872E3B NODE_JOINED
2025-08-21T14:59:42.445481 0x35CE7BC91E0F3535 NODE_JOINED
2025-08-21T14:59:42.542355 0x62EA2424EC725377 NODE_JOINED
2025-08-21T14:59:42.607414 0x3D8C803B29CDFEE5 NODE_JOINED
2025-08-21T14:59:42.650651 0xF0191FAE600A683B NODE_JOINED
2025-08-21T14:59:42.727185 0x62EA2424EC725377 NODE_JOINED
2025-08-21T14:59:42.772094 0x62EA2424EC725377 NODE_JOINED
2025-08-21T14:59:42.824336 0xFDB6CC02C854CF1E NODE_JOINED
2025-08-21T14:59:42.834407 0xDCE0471FD437E359 NODE_JOINED
2025-08-21T14:59:42.846408 0x44B408F1766E0BF5 NODE_JOINED
2025-08-21T14:59:42.856447 0xBBD5A9C611DA3321 NODE_JOINED
2025-08-21T14:59:42.878441 0x9579960F203ADE95 NODE_JOINED
2025-08-21T14:59:42.911606 0xCD9FC2F10292D689 NODE_JOINED
2025-08-21T14:59:42.921454 0x44E5B4534F8DBC91 NODE_JOINED
2025-08-21T14:59:42.943599 0x564C682ACC9A2E04 NODE_JOINED
2025-08-21T14:59:42.976619 0x13D398E530317D6F NODE_JOINED
2025-08-21T14:59:43.027501 0x0314C3596BF55EB0 NODE_JOINED
2025-08-21T14:59:43.116430 0x92D09B92D4C096B7 NODE_JOINED
2025-08-21T14:59:43.160580 0x34CC9F023F7278AC NODE_JOINED
2025-08-21T14:59:43.170550 0xA8AA71AD0EECCFEA NODE_JOINED
2025-08-21T14:59:43.182468 0xF32E9A8AD1330DAA NODE_JOINED
2025-08-21T14:59:43.322436 0xDBD14A8C2AB0CE32 NODE_JOINED
2025-08-21T14:59:43.354420 0x038C701874C52B20 NODE_JOINED
2025-08-21T14:59:43.387424 0x18AEAF2D1A44956C NODE_JOINED
2025-08-21T14:59:43.409397 0x7AB893A1407FC78B NODE_JOINED
2025-08-21T14:59:43.561617 0x554EC897971DCF18 NODE_JOINED
2025-08-21T14:59:43.592431 0x040877A02041BD1D NODE_JOINED
2025-08-21T14:59:43.602363 0x7DE4C0586D06974B NODE_JOINED
2025-08-21T14:59:43.783094 0x8287A487A221DC74 NODE_JOINED
2025-08-21T14:59:43.828665 0xC82CA0F38D2A15E9 NODE_JOINED
2025-08-21T14:59:44.013483 0x83C6ECAC460B23F3 NODE_JOINED
2025-08-21T14:59:44.025458 0x170A5A45AE7877A0 NODE_JOINED
2025-08-21T14:59:44.099748 0x17D0F99D09B254CD NODE_JOINED
2025-08-21T14:59:44.112438 0xB166C8B51AA6AFB4 NODE_JOINED
2025-08-21T14:59:44.262467 0x663CFC5276CFCEAB NODE_JOINED
2025-08-21T14:59:44.321189 0xBB3EB8601B7E9133 NODE_JOINED
2025-08-21T14:59:44.414414 0xE465587BB61A99A9 NODE_JOINED
2025-08-21T14:59:44.501430 0x4A4698749A3DF602 NODE_JOINED
2025-08-21T14:59:44.511406 0x588D2578218A459B NODE_JOINED
2025-08-21T14:59:44.638168 0x0A833E78880C6DC5 NODE_JOINED
2025-08-21T14:59:44.638817 0xF1B028C6B39693A5 NODE_JOINED
2025-08-21T14:59:44.653403 0x15D5017AA3800F1E NODE_JOINED
2025-08-21T14:59:45.190064 0x9AB59A717BC7F74D NODE_JOINED
2025-08-21T14:59:45.291412 0x93B9409637347BA4 NODE_JOINED
2025-08-21T14:59:52.419463 0x13D398E530317D6F NODE_LEFT
2025-08-21T14:59:52.530745 0x588D2578218A459B NODE_LEFT
2025-08-21T14:59:52.692746 0x6CE02E64CFA45053 NODE_LEFT
2025-08-21T14:59:52.967912 0x13D398E530317D6F NODE_JOINED
2025-08-21T14:59:53.154810 0x6CE02E64CFA45053 NODE_JOINED
"""

# Data Processing
def parse_blob(blob: str) -> pd.DataFrame:
    rows = []
    for line in blob.strip().splitlines():
        parts = line.strip().split()
        if len(parts) < 3:
            continue
        ts, addr, evt = parts[0], parts[1], parts[2]
        rows.append({"timestamp": ts, "node_address": addr, "event": evt})
    df = pd.DataFrame(rows)
    if not df.empty:
        df["timestamp"] = pd.to_datetime(df["timestamp"])
    return df

# Parse raw blobs
df_join_raw = parse_blob(join_blob)
df_left_raw = parse_blob(left_blob)

# Clean JOIN data: filter for JOIN events, sort by time, keep first per address
# This is a robust way to handle mixed event types in the blob
df_join = (
    df_join_raw[df_join_raw["event"] == "NODE_JOINED"]
    .sort_values("timestamp")
    .drop_duplicates(subset="node_address", keep="first")
    .reset_index(drop=True)
)

# Clean LEFT data: filter for LEFT events, sort by time, keep first per address
df_left = (
    df_left_raw[df_left_raw["event"] == "NODE_LEFT"]
    .sort_values("timestamp")
    .drop_duplicates(subset="node_address", keep="first")
    .reset_index(drop=True)
)

# Matching and Calculation
# Find common addresses between the cleaned datasets
join_set = set(df_join["node_address"])
left_set = set(df_left["node_address"])
common_addrs = sorted(list(join_set & left_set))

# Calculate adjusted time for LEFT events
TIMEOUT_DELTA = pd.to_timedelta(TIMEOUT_VALUE_SECONDS, unit='s')
df_left["adjusted_left_time"] = df_left["timestamp"] - TIMEOUT_DELTA

# Filter both frames to only include common addresses for a clean merge
df_join_m = df_join[df_join["node_address"].isin(common_addrs)]
df_left_m = df_left[df_left["node_address"].isin(common_addrs)]

merged = pd.merge(
    df_left_m[["node_address", "timestamp", "adjusted_left_time"]],
    df_join_m[["node_address", "timestamp"]],
    on="node_address",
    suffixes=("_left", "_joined"),
)
if merged.empty:
    raise RuntimeError("No matching addresses found after filtering.")

# Calculate the final time difference
merged["final_difference"] = merged["timestamp_joined"] - merged["adjusted_left_time"]

# Prepare final result table
result = merged[["node_address", "timestamp_left", "adjusted_left_time", "timestamp_joined", "final_difference"]].copy()
result = result.rename(columns={
    "timestamp_left": "Original_Left_Time",
    "adjusted_left_time": f"Adjusted_Left_Time (-{TIMEOUT_VALUE_SECONDS:.5f}s)",
    "timestamp_joined": "Rejoined_Time",
    "final_difference": "Final_Time_Difference",
})

# Calculate seconds and clip negative values to zero for plotting/stats
result["diff_seconds_raw"] = result["Final_Time_Difference"].dt.total_seconds()
result["diff_seconds"] = result["diff_seconds_raw"].clip(lower=0.0)

# Save any rows with negative differences to a CSV for inspection
neg_rows = result[result["diff_seconds_raw"] < 0].copy()
if not neg_rows.empty:
    neg_rows.to_csv("gateway_handover_80nodes_negative_rows.csv", index=False)
    print(f"Found {len(neg_rows)} negative values; saved to 'gateway_handover_80nodes_negative_rows.csv'.")

# Create ranks for plotting
result = result.sort_values("diff_seconds", kind="mergesort").reset_index(drop=True)
result["rank"] = np.arange(1, len(result) + 1)
result["rank_label"] = result["rank"].apply(lambda i: f"N{i:03d}")
result[["rank_label", "node_address", "diff_seconds", "Original_Left_Time", "Rejoined_Time"]].to_csv(
    "gateway_handover_80nodes_rank_mapping.csv", index=False
)
print(f"Rank mapping saved to 'gateway_handover_80nodes_rank_mapping.csv' ({len(result)} entries)")

# Statistics
avg = result["diff_seconds"].mean()
n = len(result)
print(f"Sample Size N={n} | Average Rejoin Delay: {avg:.3f}s")

# Visualization (Lollipop Plot)
plt.style.use('seaborn-v0_8-ticks')
plt.rcParams.update({'font.size': 16})

x = result["rank"].values
y = result["diff_seconds"].values

plt.figure(figsize=(16, 8))
plt.vlines(x, 0, y, linewidth=1.5)
plt.scatter(x, y, s=24)

plt.axhline(avg, linestyle="--", linewidth=2.5, label=f"Average = {avg:.3f}s")

# Configure x-axis ticks to avoid overcrowding
step = 10
ticks = sorted(set([1] + list(range(step, n, step)) + [n]))
plt.xticks(ticks, [f"N{i:03d}" for i in ticks], fontsize=14)

plt.title(f"Gateway Handover Time — {n} Nodes", fontsize=24, fontweight='bold')
plt.xlabel(f"Node Rank (N001…N{n:03d})", fontsize=18)
plt.ylabel("Rejoin Delay (seconds)", fontsize=18)
plt.grid(axis="y", linestyle="--", alpha=0.6)
plt.legend(loc="upper left", prop={'size': 16})
plt.tight_layout()

plt.savefig("gateway_handover_80nodes_lollipop.pdf", bbox_inches='tight')
plt.show()
